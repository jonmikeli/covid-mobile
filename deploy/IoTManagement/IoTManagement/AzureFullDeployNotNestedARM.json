{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "projectProperties": {
      "type": "object",
      "defaultValue": {
        "name": "ProjectName",
        "code": "project_code",
        "feature": "feature_code",
        "version": "v0.1",
        "customer": "Customer",
        "customerCode": "customer_code"
      }
    },
    "environment": {
      "type": "string",
      "allowedValues": [ "dev", "arm", "int", "qa", "prod" ],
      "defaultValue": "dev"
    },
    "module": {
      "type": "string",
      "allowedValues": [ "IoTManagement", "DataProcessing", "Business", "Common", "Gateway", "IdentityCore" ]
    },
    "moduleCode": {
      "type": "string",
      "allowedvalues": [ "iot", "dp", "bm", "co", "ga", "id" ]
    },
    "location": {
      "type": "string",
      "defaultValue": "westeurope",
      "allowedValues": [ "westeurope" ]
    },
    "appServicePlanSku": {
      "type": "string",
      "defaultValue": "F1",
      "allowedValues": [ "F1", "D1", "B1", "B2", "B3", "S1", "S2", "S3", "P1", "P2", "P3", "P4" ],
      "metadata": {
        "description": "Describes plan's pricing tier and capacity. Check details at https://azure.microsoft.com/en-us/pricing/details/app-service/"
      }
    },
    "iotHubSettings": {
      "type": "object",
      "defaultValue": {
        "sku": {
          "name": "S1",
          "tier": "Standard",
          "capacity": 2
        },
        "authorizationPolicyOwnerName": "iothubowner"
      }
    },
    "eventHubNamespaceSettings": {
      "type": "object",
      "defaultValue": {
        "sku": {
          "name": "Standard",
          "tier": "Standard",
          "capacity": 2
        },
        "authorizationRulesNames": {
          "rootManage": "RootManagePolicy",
          "send": "SendPolicy",
          "listen": "ListenPolicy"
        },
        "consumerGroupsDefaultName": "$Default"
      }
    },
    "serviceBusNamespaceSettings": {
      "type": "object",
      "defaultValue": {
        "sku": {
          "name": "Standard",
          "tier": "Standard"
        },
        "authorizationRulesNames": {
          "rootManage": "RootManagePolicy",
          "send": "SendPolicy",
          "listen": "ListenPolicy"
        },
        "queueNames": {
          "deviceError": "deviceerror"
        },
        "topicNames": {
          "data": "data",
          "alert": "alert"
        },
        "topicSubscriptionNames": {
          "default": "ApplicationSubscription"
        }
      }
    },
    "storageAccountSettings": {
      "type": "object",
      "defaultValue": {
        "sku": {
          "name": "Standard_LRS",
          "tier": "Standard"
        }
      }
    },
    "appServicePlanSettings": {
      "type": "object",
      "defaultValue": {
        "sku": {
          "name": "B1",
          "tier": "Basic",
          "size": "B1",
          "family": "B",
          "capacity": 1
        }
      }
    },
    "keyVaultSettings": {
      "type": "object",
      "defaultValue": {
        "sku": {
          "family": "A",
          "name": "Standard"
        }
      }
    },
    "rgName": {
      "type": "string",
      "defaultValue": ""
    }
  },
  "variables": {
    "prefix": "[concat(parameters('projectProperties').customerCode,'-',parameters('projectProperties').code,'-',parameters('projectProperties').feature)]",
    "prefixShort": "[concat(parameters('projectProperties').customerCode,parameters('projectProperties').code,parameters('projectProperties').feature)]",
    "suffix": "[concat('-',parameters('environment'))]",
    "suffixShort": "[parameters('environment')]",

    "aadTenantId": "[subscription().tenantId]",
    "subscriptionId": "[subscription().subscriptionId]",

    "rgName": "[if(empty(parameters('rgName')),concat(variables('prefix'),variables('suffix')),parameters('rgName'))]",

    "deploymentName": "[concat(variables('rgName'),'-deployment')]",

    "appServicePlanName": "[concat(variables('prefix'),'-appplan',variables('suffix'))]",
    "apiName": "[concat(variables('prefix'),'-api',variables('suffix'))]",

    "keyVaultName": "[concat(variables('prefix'),'-kv', variables('suffix'))]",
    "keyVaultIoTHubConnectionStringKey": "[concat(variables('iotHubName'),'-connection-string')]",
    "keyVaultIoTHubKeyKey": "[concat(variables('iotHubName'),'-key')]",
    "keyVaultEventHubPolicyRootConnectionStringKey": "[concat(variables('eventHubNamespaceName'),'-root-connection-string')]",
    "keyVaultEventHubTelemetryPolicySendConnectionStringKey": "[concat(variables('eventHubNamespaceName'),'-',variables('eventHubTelemetryName'),'-policy-send-connection-string')]",
    "keyVaultEventHubTelemetryPolicyListenConnectionStringKey": "[concat(variables('eventHubNamespaceName'),'-',variables('eventHubTelemetryName'),'-policy-listen-connection-string')]",
    "keyVaultStorageKeyKey": "[concat(variables('storageAccountName'),'-key')]",
    "keyVaultStorageConnectionStringKey": "[concat(variables('storageAccountName'),'-connection-string')]",
    "keyVaultApplicationInsightInstrumentationKey": "[concat(variables('applicationInsightsName'),'-instrumentation-key')]",
    "keyVaultApplicationInsightConnectionStringKey": "[concat(variables('applicationInsightsName'),'-connection-string')]",

    "applicationInsightsName": "[concat(variables('prefix'),'-ah',variables('suffix'))]",

    "iotHubName": "[concat(variables('prefix'),'-iothub',variables('suffix'))]",
    "eventHubNamespaceName": "[concat(variables('prefix'),'-eventhub-ns',variables('suffix'))]",
    "eventHubTelemetryName": "telemetry",

    "storageAccountName": "[concat(variables('prefixShort'),'storagehub',variables('suffixShort'))]",
    "apiAppServicePlanName": "[concat(variables('prefix'),'appserviceplan-api',variables('suffix'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Devices/IotHubs",
      "sku": "[parameters('iotHubSettings').sku]",
      "name": "[variables('iotHubName')]",
      "apiVersion": "2018-04-01",
      "location": "[parameters('location')]",
      "tags": {
        "displayName": "IoT Hub",
        "project": "[parameters('projectProperties').name]",
        "feature": "[parameters('projectProperties').feature]",
        "version": "[parameters('projectProperties').version]",
        "environment": "[parameters('environment')]"
      },
      "scale": null,
      "properties": {
        "authorizationPolicies": [
          {
            "keyName": "[parameters('iotHubSettings').authorizationPolicyOwnerName]",
            "rights": "RegistryWrite, ServiceConnect, DeviceConnect"
          }
        ],
        "eventHubEndpoints": {
          "events": {
            "retentionTimeInDays": 1,
            "partitionCount": 4
          },
          "operationsMonitoringEvents": {
            "retentionTimeInDays": 1,
            "partitionCount": 4
          }
        },
        "cloudToDevice": {
          "maxDeliveryCount": 10,
          "defaultTtlAsIso8601": "PT1H",
          "feedback": {
            "lockDurationAsIso8601": "PT1M",
            "ttlAsIso8601": "PT1H",
            "maxDeliveryCount": 10
          }
        },
        "features": "None",
        "routing": {
          "endpoints": {
            "serviceBusQueues": [
              {
                "connectionString": "[listKeys(resourceId('Microsoft.ServiceBus/namespaces/queues/authorizationRules',variables('serviceBusNamespaceName'), parameters('serviceBusNamespaceSettings').queueNames.deviceError, parameters('serviceBusNamespaceSettings').authorizationRulesNames.send),'2017-04-01').primaryConnectionString]",
                "name": "DeviceErrorEndPoint",
                "subscriptionId": "[variables('subscriptionId')]",
                "resourceGroup": "[variables('rgName')]"
              }
            ],
            "serviceBusTopics": [
              {
                "connectionString": "[listKeys(resourceId('Microsoft.ServiceBus/namespaces/topics/authorizationRules',variables('serviceBusNamespaceName'), parameters('serviceBusNamespaceSettings').topicNames.alert, parameters('serviceBusNamespaceSettings').authorizationRulesNames.send),'2017-04-01').primaryConnectionString]",
                "name": "AlertsEndPoint",
                "subscriptionId": "[variables('subscriptionId')]",
                "resourceGroup": "[variables('rgName')]"
              }
            ],
            "eventHubs": [
              {
                "connectionString": "[listKeys(resourceId('Microsoft.EventHub/namespaces/eventhubs/authorizationRules',variables('eventHubNamespaceName'), variables('eventHubTelemetryName'), parameters('eventHubNamespaceSettings').authorizationRulesNames.send),'2017-04-01').primaryConnectionString]",
                "name": "TelemetryEndPoint",
                "subscriptionId": "[variables('subscriptionId')]",
                "resourceGroup": "[variables('rgName')]"
              }
            ],
            "storageContainers": []
          },
          "routes": [
            {
              "name": "TelemetryRoute",
              "source": "DeviceMessages",
              "condition": "$body.messageType = 'data'",
              "endpointNames": [
                "TelemetryEndPoint"
              ],
              "isEnabled": true
            },
            {
              "name": "AlertsRoute",
              "source": "DeviceMessages",
              "condition": "$body.messageType = 'alert'",
              "endpointNames": [
                "AlertsEndPoint"
              ],
              "isEnabled": true
            },            
            {
              "name": "ErrorRoute",
              "source": "DeviceMessages",
              "condition": "$body.messageType = 'error'",
              "endpointNames": [
                "DeviceErrorEndPoint"
              ],
              "isEnabled": true
            }
          ],
          "fallbackRoute": {
            "name": "$fallback",
            "source": "DeviceMessages",
            "condition": "true",
            "endpointNames": [
              "events"
            ],
            "isEnabled": false
          },
          "storageEndpoints": {
            "$default": {
              "connectionString": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts',variables('storageAccountName')),'2018-07-01').keys[0].value,';EndpointSuffix=core.windows.net')]",
              "containerName": "[variables('storageAccountContainerFileUploadsSettings').name]"
            }
          },
          "messagingEndpoints": {
            "fileNotifications": {
              "lockDurationAsIso8601": "PT1M",
              "ttlAsIso8601": "PT1H",
              "maxDeliveryCount": 10
            }
          },
          "enableFileUploadNotifications": true
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces/eventhubs/authorizationRules',variables('eventHubNamespaceName'), variables('eventHubTelemetryName'), parameters('eventHubNamespaceSettings').authorizationRulesNames.send)]",
        "[resourceId('Microsoft.EventHub/namespaces/eventhubs/authorizationRules',variables('eventHubNamespaceName'), variables('eventHubTwinUpdatesName'), parameters('eventHubNamespaceSettings').authorizationRulesNames.send)]",
        "[resourceId('Microsoft.ServiceBus/namespaces/queues/authorizationRules',variables('serviceBusNamespaceName'), parameters('serviceBusNamespaceSettings').queueNames.deviceError, parameters('serviceBusNamespaceSettings').authorizationRulesNames.send)]",
        "[resourceId('Microsoft.Storage/storageAccounts',variables('storageAccountName'))]"
      ]

    },
    {
      "type": "Microsoft.EventHub/namespaces",
      "sku": "[parameters('eventHubNamespaceSettings').sku]",
      "name": "[variables('eventHubNamespaceName')]",
      "apiVersion": "2017-04-01",
      "location": "[parameters('location')]",
      "tags": {
        "displayName": "Event Hub-Namespace",
        "project": "[parameters('projectProperties').name]",
        "feature": "[parameters('projectProperties').feature]",
        "version": "[parameters('projectProperties').version]",
        "environment": "[parameters('environment')]"
      },
      "scale": null,
      "properties": {
        "isAutoInflateEnabled": false,
        "maximumThroughputUnits": 0
      },
      "dependsOn": [
      ]
    },
    {
      "type": "Microsoft.EventHub/namespaces/eventhubs",
      "name": "[concat(variables('eventHubNamespaceName'), '/', variables('eventHubTelemetryName'))]",
      "apiVersion": "2017-04-01",
      "location": "[parameters('location')]",
      "scale": null,
      "properties": {
        "messageRetentionInDays": 1,
        "partitionCount": 2,
        "status": "Active"
      },
      "tags": {
        "displayName": "Event Hub-Telemetry"
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces', variables('eventHubNamespaceName'))]"
      ]
    },
    {
      "type": "Microsoft.EventHub/namespaces/eventhubs/authorizationRules",
      "name": "[concat(variables('eventHubNamespaceName'), '/', variables('eventHubTelemetryName'), '/', parameters('eventHubNamespaceSettings').authorizationRulesNames.listen)]",
      "apiVersion": "2017-04-01",
      "location": "[parameters('location')]",
      "scale": null,
      "properties": {
        "rights": [
          "Listen"
        ]
      },
      "tags": {
        "displayName": "Event Hub-Telemetry-Authorization Rules-Listen"
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces', variables('eventHubNamespaceName'))]",
        "[resourceId('Microsoft.EventHub/namespaces/eventhubs', variables('eventHubNamespaceName'), variables('eventHubTelemetryName'))]"
      ]
    },
    {
      "type": "Microsoft.EventHub/namespaces/eventhubs/authorizationRules",
      "name": "[concat(variables('eventHubNamespaceName'), '/', variables('eventHubTelemetryName'), '/', parameters('eventHubNamespaceSettings').authorizationRulesNames.send)]",
      "apiVersion": "2017-04-01",
      "location": "[parameters('location')]",
      "scale": null,
      "properties": {
        "rights": [
          "Send"
        ]
      },
      "tags": {
        "displayName": "Event Hub-Telemetry-Authorization Rules-Send"
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces', variables('eventHubNamespaceName'))]",
        "[resourceId('Microsoft.EventHub/namespaces/eventhubs', variables('eventHubNamespaceName'), variables('eventHubTelemetryName'))]"
      ]
    },
    {
      "type": "Microsoft.EventHub/namespaces/AuthorizationRules",
      "name": "[concat(variables('eventHubNamespaceName'), '/', parameters('eventHubNamespaceSettings').authorizationRulesNames.rootManage)]",
      "apiVersion": "2017-04-01",
      "location": "[parameters('location')]",
      "scale": null,
      "properties": {
        "rights": [
          "Listen",
          "Manage",
          "Send"
        ]
      },
      "tags": {
        "displayName": "Event Hub-Root-Authorization Rules-LMS"
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces', variables('eventHubNamespaceName'))]"
      ]
    },
    {
      "type": "Microsoft.EventHub/namespaces/AuthorizationRules",
      "name": "[concat(variables('eventHubNamespaceName'), '/', parameters('eventHubNamespaceSettings').authorizationRulesNames.send)]",
      "apiVersion": "2017-04-01",
      "location": "[parameters('location')]",
      "scale": null,
      "properties": {
        "rights": [
          "Send"
        ]
      },
      "tags": {
        "displayName": "Event Hub-Root-Authorization Rules-Send"
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces', variables('eventHubNamespaceName'))]"
      ]
    },
    {
      "type": "Microsoft.EventHub/namespaces/AuthorizationRules",
      "name": "[concat(variables('eventHubNamespaceName'), '/', parameters('eventHubNamespaceSettings').authorizationRulesNames.listen)]",
      "apiVersion": "2017-04-01",
      "location": "[parameters('location')]",
      "scale": null,
      "properties": {
        "rights": [
          "Listen"
        ]
      },
      "tags": {
        "displayName": "Event Hub-Root-Authorization Rules-Listen"
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces', variables('eventHubNamespaceName'))]"
      ]
    },
    {
      "type": "Microsoft.EventHub/namespaces/eventhubs/consumergroups",
      "name": "[concat(variables('eventHubNamespaceName'), '/', variables('eventHubTelemetryName'), '/', parameters('eventHubNamespaceSettings').consumerGroupsDefaultName)]",
      "apiVersion": "2017-04-01",
      "location": "[parameters('location')]",
      "scale": null,
      "properties": {},
      "tags": {
        "displayName": "Event Hub-Telemetry-Consumer groups-Default"
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces', variables('eventHubNamespaceName'))]",
        "[resourceId('Microsoft.EventHub/namespaces/eventhubs', variables('eventHubNamespaceName'), variables('eventHubTelemetryName'))]"
      ]
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "sku": "[parameters('appServicePlanSettings').sku]",
      "kind": "app",
      "name": "[variables('appServicePlanName')]",
      "apiVersion": "2016-09-01",
      "location": "[parameters('location')]",
      "tags": {
        "displayName": "Hosting plan-Applications",
        "project": "[parameters('projectProperties').name]",
        "feature": "[parameters('projectProperties').feature]",
        "version": "[parameters('projectProperties').version]",
        "environment": "[parameters('environment')]"
      },
      "properties": {
        "name": "[variables('appServicePlanName')]",
        "reserved": false
      },
      "dependsOn": []
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "name": "[variables('keyVaultName')]",
      "apiVersion": "2016-10-01",
      "location": "[parameters('location')]",
      "tags": {
        "displayName": "Key vault",
        "project": "[parameters('projectProperties').name]",
        "feature": "[parameters('projectProperties').feature]",
        "version": "[parameters('projectProperties').version]",
        "environment": "[parameters('environment')]"
      },
      "scale": null,
      "properties": {
        "sku": "[parameters('keyVaultSettings').sku]",
        "tenantId": "[variables('aadTenantId')]",
        "enabledForDeployment": false,
        "enabledForDiskEncryption": false,
        "enabledForTemplateDeployment": true,
        "accessPolicies": [
          {
            "tenantId": "[variables('aadTenantId')]",
            "objectId": "[reference(resourceId('Microsoft.Web/sites', variables('apiName')), '2016-08-01', 'Full').identity.principalId]",
            "permissions": {
              "secrets": [ "get" ]
            }
          }
        ]
      },
      "dependsOn": [
        "[variables('apiName')]"
      ]
    },
    {
      "type": "microsoft.insights/components",
      "kind": "web",
      "name": "[variables('applicationInsightsName')]",
      "apiVersion": "2015-05-01",
      "location": "[parameters('location')]",
      "tags": {
        "displayName": "Application insights",
        "project": "[parameters('projectProperties').name]",
        "feature": "[parameters('projectProperties').feature]",
        "version": "[parameters('projectProperties').version]",
        "environment": "[parameters('environment')]"
      },
      "scale": null,
      "properties": {
        "Application_Type": "web",
        "Flow_Type": null,
        "Request_Source": "IbizaWebAppExtensionCreate",
        "HockeyAppId": null,
        "SamplingPercentage": null,
        "applicationId": "[variables('applicationInsightsName')]"
      },
      "dependsOn": [

      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "sku": "[parameters('storageAccountSettings').sku]",
      "kind": "StorageV2",
      "name": "[variables('storageAccountName')]",
      "apiVersion": "2018-07-01",
      "location": "[parameters('location')]",
      "tags": {
        "displayName": "Azure storage-Service Apps",
        "project": "[parameters('projectProperties').name]",
        "feature": "[parameters('projectProperties').feature]",
        "version": "[parameters('projectProperties').version]",
        "environment": "[parameters('environment')]"
      },
      "scale": null,
      "properties": {
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [],
          "ipRules": [],
          "defaultAction": "Allow"
        },
        "supportsHttpsTrafficOnly": false,
        "encryption": {
          "services": {
            "file": {
              "enabled": true
            },
            "blob": {
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        }
      },
      "resources": [
      ],
      "dependsOn": [
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2019-06-01",
      "name": "[concat(variables('storageAccountName'), '/default')]",
      "tags": {
        "displayName": "Azure storage-Blob services creation",
        "project": "[parameters('projectProperties').name]",
        "feature": "[parameters('projectProperties').feature]",
        "version": "[parameters('projectProperties').version]",
        "environment": "[parameters('environment')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ],
      "sku": {
        "name": "Standard_LRS"
      },
      "properties": {
        "cors": {
          "corsRules": []
        },
        "deleteRetentionPolicy": {
          "enabled": false
        }
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "kind": "api",
      "name": "[variables('apiName')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "apiVersion": "2016-08-01",
      "location": "[parameters('location')]",
      "tags": {
        "displayName": "REST API",
        "project": "[parameters('projectProperties').name]",
        "feature": "[parameters('projectProperties').feature]",
        "version": "[parameters('projectProperties').version]",
        "environment": "[parameters('environment')]",
        "[concat('hidden-related:', resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', variables('appServicePlanName'))]": "Resource"
      },
      "scale": null,
      "properties": {
        "name": "[variables('apiName')]",
        "enabled": true,
        "serverFarmId": "[variables('appServicePlanName')]",
        "alwaysOn": false,
        "reserved": false,
        "httpsOnly": true
      },
      "resources": [
        {
          "name": "appsettings",
          "type": "config",
          "apiVersion": "2016-08-01",
          "dependsOn": [
            "[variables('apiName')]",
            "[resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))]"
          ],
          "properties": {
            "APPLICATIONINSIGHTS_CONNECTION_STRING": "[concat('@Microsoft.KeyVault(SecretUri=', reference(resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), variables('keyVaultApplicationInsightConnectionStringKey'))).secretUriWithVersion,')')]",            

            "AzureSettings:Storage:Name": "[variables('storageAccountName')]",
            "AzureSettings:Storage:Key": "[concat('@Microsoft.KeyVault(SecretUri=', reference(resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), variables('keyVaultStorageKeyKey'))).secretUriWithVersion,')')]",
            "AzureSettings:Storage:ConnectionString": "[concat('@Microsoft.KeyVault(SecretUri=', reference(resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), variables('keyVaultStorageConnectionStringKey'))).secretUriWithVersion,')')]",

            "AzureSettings:IoTHub:Name": "[variables('iotHubName')]",
            "AzureSettings:IoTHub:ConnectionString": "[concat('@Microsoft.KeyVault(SecretUri=', reference(resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), variables('keyVaultIoTHubConnectionStringKey'))).secretUriWithVersion,')')]"
          }
        }
      ],
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms/', variables('appServicePlanName'))]",
        "[resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "name": "[concat(variables('keyVaultName'), '/', variables('keyVaultIoTHubConnectionStringKey'))]",
      "apiVersion": "2016-10-01",
      "location": "[parameters('location')]",
      "scale": null,
      "properties": {
        "attributes": {
          "enabled": true
        },
        "value": "[concat('HostName=', reference(resourceId('Microsoft.Devices/IoTHubs', variables('iotHubName')), providers('Microsoft.Devices', 'IoTHubs').apiVersions[0]).hostName, ';SharedAccessKeyName=iothubowner;SharedAccessKey=', listKeys(resourceId('Microsoft.Devices/IotHubs', variables('iotHubName')), providers('Microsoft.Devices', 'IoTHubs').apiVersions[0]).value[0].primaryKey)]"
      },
      "tags": {
        "displayName": "Azure Key Vault-Secret-keyVaultIoTHubConnectionStringKey"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        "[resourceId('Microsoft.Devices/IoTHubs', variables('iotHubName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "name": "[concat(variables('keyVaultName'), '/', variables('keyVaultIoTHubKeyKey'))]",
      "apiVersion": "2016-10-01",
      "location": "[parameters('location')]",
      "scale": null,
      "properties": {
        "attributes": {
          "enabled": true
        },
        "value": "[listKeys(resourceId('Microsoft.Devices/IotHubs', variables('iotHubName')), providers('Microsoft.Devices', 'IoTHubs').apiVersions[0]).value[0].primaryKey]"
      },
      "tags": {
        "displayName": "Azure Key Vault-Secret-keyVaultIoTHubKeyKey"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        "[resourceId('Microsoft.Devices/IoTHubs', variables('iotHubName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "name": "[concat(variables('keyVaultName'), '/', variables('keyVaultStorageKeyKey'))]",
      "apiVersion": "2016-10-01",
      "location": "[parameters('location')]",
      "scale": null,
      "properties": {
        "attributes": {
          "enabled": true
        },
        "value": "[listKeys(resourceId('Microsoft.Storage/storageAccounts',variables('storageAccountName')),'2018-07-01').keys[0].value]"
      },
      "tags": {
        "displayName": "Azure Key Vault-Secret-keyVaultStorageKeyKey"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "name": "[concat(variables('keyVaultName'), '/', variables('keyVaultStorageConnectionStringKey'))]",
      "apiVersion": "2016-10-01",
      "location": "[parameters('location')]",
      "scale": null,
      "properties": {
        "attributes": {
          "enabled": true
        },
        "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts',variables('storageAccountName')),'2018-07-01').keys[0].value)]"
      },
      "tags": {
        "displayName": "Azure Key Vault-Secret-keyVaultStorageConnectionStringKey"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "name": "[concat(variables('keyVaultName'), '/', variables('keyVaultApplicationInsightConnectionStringKey'))]",
      "apiVersion": "2016-10-01",
      "location": "[parameters('location')]",
      "scale": null,
      "properties": {
        "attributes": {
          "enabled": true
        },
        "value": "[concat('InstrumentationKey=',reference(resourceId('Microsoft.Insights/components', variables('applicationInsightsName')), '2015-05-01').InstrumentationKey)]"
      },
      "tags": {
        "displayName": "Azure Key Vault-Secret-keyVaultApplicationInsightConnectionStringKey"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        "[resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "name": "[concat(variables('keyVaultName'), '/', variables('keyVaultApplicationInsightInstrumentationKey'))]",
      "apiVersion": "2016-10-01",
      "location": "[parameters('location')]",
      "scale": null,
      "properties": {
        "attributes": {
          "enabled": true
        },
        "value": "[reference(resourceId('Microsoft.Insights/components', variables('applicationInsightsName')), '2015-05-01').InstrumentationKey]"
      },
      "tags": {
        "displayName": "Azure Key Vault-Secret-keyVaultApplicationInsightInstrumentationKey"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        "[resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "name": "[concat(variables('keyVaultName'), '/', variables('keyVaultEventHubTelemetryPolicySendConnectionStringKey'))]",
      "apiVersion": "2016-10-01",
      "location": "[parameters('location')]",
      "scale": null,
      "properties": {
        "attributes": {
          "enabled": true
        },
        "value": "[listKeys(resourceId('Microsoft.EventHub/namespaces/eventhubs/authorizationRules', variables('eventHubNamespaceName'), variables('eventHubTelemetryName'), parameters('eventHubNamespaceSettings').authorizationRulesNames.send), '2015-08-01').primaryConnectionString]"
      },
      "tags": {
        "displayName": "Azure Key Vault-Secret-keyVaultEventHubTelemetryPolicySendConnectionStringKey"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        "[resourceId('Microsoft.EventHub/namespaces/eventhubs', variables('eventHubNamespaceName'), variables('eventHubTelemetryName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "name": "[concat(variables('keyVaultName'), '/', variables('keyVaultEventHubTelemetryPolicyListenConnectionStringKey'))]",
      "apiVersion": "2016-10-01",
      "location": "[parameters('location')]",
      "scale": null,
      "properties": {
        "attributes": {
          "enabled": true
        },
        "value": "[listKeys(resourceId('Microsoft.EventHub/namespaces/eventhubs/authorizationRules', variables('eventHubNamespaceName'), variables('eventHubTelemetryName'), parameters('eventHubNamespaceSettings').authorizationRulesNames.listen), '2015-08-01').primaryConnectionString]"
      },
      "tags": {
        "displayName": "Azure Key Vault-Secret-keyVaultEventHubTelemetryPolicyListenConnectionStringKey"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        "[resourceId('Microsoft.EventHub/namespaces/eventhubs', variables('eventHubNamespaceName'), variables('eventHubTelemetryName'))]"
      ]
    }
  ],
  "outputs": {
    "resourceGroupName": {
      "type": "string",
      "value": "[variables('rgName')]"
    },
    "aadTenantId": {
      "type": "string",
      "value": "[variables('aadTenantId')]"
    },
    "subscriptionId": {
      "type": "string",
      "value": "[variables('subscriptionId')]"
    },
    "keyVaultName": {
      "type": "string",
      "value": "[variables('keyVaultName')]"
    },
    "apiName": {
      "type": "string",
      "value": "[variables('apiName')]"
    },
    "storageAccountName": {
      "type": "string",
      "value": "[variables('storageAccountName')]"
    },
    "iotHubName": {
      "type": "string",
      "value": "[variables('iotHubName')]"
    },
    "eventHubNamespaceName": {
      "type": "string",
      "value": "[variables('eventHubNamespaceName')]"
    },
    "applicationInsightsName": {
      "type": "string",
      "value": "[variables('applicationInsightsName')]"
    },
    "environment": {
      "type": "string",
      "value": "[parameters('environment')]"
    }

  }
}
